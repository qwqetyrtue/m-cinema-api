package cn.hnist.sharo.mcinema.db.pojo;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class HallBaseExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table hall_base
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table hall_base
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table hall_base
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table hall_base
     *
     * @mbg.generated
     */
    public HallBaseExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table hall_base
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table hall_base
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table hall_base
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table hall_base
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table hall_base
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table hall_base
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table hall_base
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table hall_base
     *
     * @mbg.generated
     */
    public HallBaseExample orderBy(String orderByClause) {
        this.setOrderByClause(orderByClause);
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table hall_base
     *
     * @mbg.generated
     */
    public HallBaseExample orderBy(String ... orderByClauses) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < orderByClauses.length; i++) {
            sb.append(orderByClauses[i]);
            if (i < orderByClauses.length - 1) {
                sb.append(" , ");
            }
        }
        this.setOrderByClause(sb.toString());
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table hall_base
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table hall_base
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria(this);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table hall_base
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table hall_base
     *
     * @mbg.generated
     */
    public static Criteria newAndCreateCriteria() {
        HallBaseExample example = new HallBaseExample();
        return example.createCriteria();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table hall_base
     *
     * @mbg.generated
     */
    public HallBaseExample when(boolean condition, IExampleWhen then) {
        if (condition) {
            then.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table hall_base
     *
     * @mbg.generated
     */
    public HallBaseExample when(boolean condition, IExampleWhen then, IExampleWhen otherwise) {
        if (condition) {
            then.example(this);
        } else {
            otherwise.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table hall_base
     *
     * @mbg.generated
     */
    public HallBaseExample distinct(boolean distinct) {
        this.setDistinct(distinct);
        return this;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table hall_base
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> seatArrangeCriteria;

        protected List<Criterion> allCriteria;

        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
            seatArrangeCriteria = new ArrayList<Criterion>();
        }

        public List<Criterion> getSeatArrangeCriteria() {
            return seatArrangeCriteria;
        }

        protected void addSeatArrangeCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            seatArrangeCriteria.add(new Criterion(condition, value, "cn.hnist.sharo.mcinema.db.mybatis.MatrixTypeHandler"));
            allCriteria = null;
        }

        protected void addSeatArrangeCriterion(String condition, Integer[][] value1, Integer[][] value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            seatArrangeCriteria.add(new Criterion(condition, value1, value2, "cn.hnist.sharo.mcinema.db.mybatis.MatrixTypeHandler"));
            allCriteria = null;
        }

        public boolean isValid() {
            return criteria.size() > 0
                || seatArrangeCriteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            if (allCriteria == null) {
                allCriteria = new ArrayList<Criterion>();
                allCriteria.addAll(criteria);
                allCriteria.addAll(seatArrangeCriteria);
            }
            return allCriteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
            allCriteria = null;
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
            allCriteria = null;
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
            allCriteria = null;
        }

        public Criteria andHallIdIsNull() {
            addCriterion("hall_id is null");
            return (Criteria) this;
        }

        public Criteria andHallIdIsNotNull() {
            addCriterion("hall_id is not null");
            return (Criteria) this;
        }

        public Criteria andHallIdEqualTo(Long value) {
            addCriterion("hall_id =", value, "hallId");
            return (Criteria) this;
        }

        public Criteria andHallIdEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("hall_id = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHallIdNotEqualTo(Long value) {
            addCriterion("hall_id <>", value, "hallId");
            return (Criteria) this;
        }

        public Criteria andHallIdNotEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("hall_id <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHallIdGreaterThan(Long value) {
            addCriterion("hall_id >", value, "hallId");
            return (Criteria) this;
        }

        public Criteria andHallIdGreaterThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("hall_id > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHallIdGreaterThanOrEqualTo(Long value) {
            addCriterion("hall_id >=", value, "hallId");
            return (Criteria) this;
        }

        public Criteria andHallIdGreaterThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("hall_id >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHallIdLessThan(Long value) {
            addCriterion("hall_id <", value, "hallId");
            return (Criteria) this;
        }

        public Criteria andHallIdLessThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("hall_id < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHallIdLessThanOrEqualTo(Long value) {
            addCriterion("hall_id <=", value, "hallId");
            return (Criteria) this;
        }

        public Criteria andHallIdLessThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("hall_id <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHallIdIn(List<Long> values) {
            addCriterion("hall_id in", values, "hallId");
            return (Criteria) this;
        }

        public Criteria andHallIdNotIn(List<Long> values) {
            addCriterion("hall_id not in", values, "hallId");
            return (Criteria) this;
        }

        public Criteria andHallIdBetween(Long value1, Long value2) {
            addCriterion("hall_id between", value1, value2, "hallId");
            return (Criteria) this;
        }

        public Criteria andHallIdNotBetween(Long value1, Long value2) {
            addCriterion("hall_id not between", value1, value2, "hallId");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIsNull() {
            addCriterion("create_time is null");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIsNotNull() {
            addCriterion("create_time is not null");
            return (Criteria) this;
        }

        public Criteria andCreateTimeEqualTo(LocalDateTime value) {
            addCriterion("create_time =", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("create_time = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotEqualTo(LocalDateTime value) {
            addCriterion("create_time <>", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("create_time <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThan(LocalDateTime value) {
            addCriterion("create_time >", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("create_time > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThanOrEqualTo(LocalDateTime value) {
            addCriterion("create_time >=", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("create_time >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThan(LocalDateTime value) {
            addCriterion("create_time <", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("create_time < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThanOrEqualTo(LocalDateTime value) {
            addCriterion("create_time <=", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("create_time <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeIn(List<LocalDateTime> values) {
            addCriterion("create_time in", values, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotIn(List<LocalDateTime> values) {
            addCriterion("create_time not in", values, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("create_time between", value1, value2, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("create_time not between", value1, value2, "createTime");
            return (Criteria) this;
        }

        public Criteria andNameIsNull() {
            addCriterion("`name` is null");
            return (Criteria) this;
        }

        public Criteria andNameIsNotNull() {
            addCriterion("`name` is not null");
            return (Criteria) this;
        }

        public Criteria andNameEqualTo(String value) {
            addCriterion("`name` =", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("`name` = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNameNotEqualTo(String value) {
            addCriterion("`name` <>", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameNotEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("`name` <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNameGreaterThan(String value) {
            addCriterion("`name` >", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameGreaterThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("`name` > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNameGreaterThanOrEqualTo(String value) {
            addCriterion("`name` >=", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameGreaterThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("`name` >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNameLessThan(String value) {
            addCriterion("`name` <", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameLessThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("`name` < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNameLessThanOrEqualTo(String value) {
            addCriterion("`name` <=", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameLessThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("`name` <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNameLike(String value) {
            addCriterion("`name` like", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameNotLike(String value) {
            addCriterion("`name` not like", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameIn(List<String> values) {
            addCriterion("`name` in", values, "name");
            return (Criteria) this;
        }

        public Criteria andNameNotIn(List<String> values) {
            addCriterion("`name` not in", values, "name");
            return (Criteria) this;
        }

        public Criteria andNameBetween(String value1, String value2) {
            addCriterion("`name` between", value1, value2, "name");
            return (Criteria) this;
        }

        public Criteria andNameNotBetween(String value1, String value2) {
            addCriterion("`name` not between", value1, value2, "name");
            return (Criteria) this;
        }

        public Criteria andSeatNumIsNull() {
            addCriterion("seat_num is null");
            return (Criteria) this;
        }

        public Criteria andSeatNumIsNotNull() {
            addCriterion("seat_num is not null");
            return (Criteria) this;
        }

        public Criteria andSeatNumEqualTo(Integer value) {
            addCriterion("seat_num =", value, "seatNum");
            return (Criteria) this;
        }

        public Criteria andSeatNumEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("seat_num = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSeatNumNotEqualTo(Integer value) {
            addCriterion("seat_num <>", value, "seatNum");
            return (Criteria) this;
        }

        public Criteria andSeatNumNotEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("seat_num <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSeatNumGreaterThan(Integer value) {
            addCriterion("seat_num >", value, "seatNum");
            return (Criteria) this;
        }

        public Criteria andSeatNumGreaterThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("seat_num > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSeatNumGreaterThanOrEqualTo(Integer value) {
            addCriterion("seat_num >=", value, "seatNum");
            return (Criteria) this;
        }

        public Criteria andSeatNumGreaterThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("seat_num >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSeatNumLessThan(Integer value) {
            addCriterion("seat_num <", value, "seatNum");
            return (Criteria) this;
        }

        public Criteria andSeatNumLessThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("seat_num < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSeatNumLessThanOrEqualTo(Integer value) {
            addCriterion("seat_num <=", value, "seatNum");
            return (Criteria) this;
        }

        public Criteria andSeatNumLessThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("seat_num <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSeatNumIn(List<Integer> values) {
            addCriterion("seat_num in", values, "seatNum");
            return (Criteria) this;
        }

        public Criteria andSeatNumNotIn(List<Integer> values) {
            addCriterion("seat_num not in", values, "seatNum");
            return (Criteria) this;
        }

        public Criteria andSeatNumBetween(Integer value1, Integer value2) {
            addCriterion("seat_num between", value1, value2, "seatNum");
            return (Criteria) this;
        }

        public Criteria andSeatNumNotBetween(Integer value1, Integer value2) {
            addCriterion("seat_num not between", value1, value2, "seatNum");
            return (Criteria) this;
        }

        public Criteria andHallTypeIsNull() {
            addCriterion("hall_type is null");
            return (Criteria) this;
        }

        public Criteria andHallTypeIsNotNull() {
            addCriterion("hall_type is not null");
            return (Criteria) this;
        }

        public Criteria andHallTypeEqualTo(String value) {
            addCriterion("hall_type =", value, "hallType");
            return (Criteria) this;
        }

        public Criteria andHallTypeEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("hall_type = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHallTypeNotEqualTo(String value) {
            addCriterion("hall_type <>", value, "hallType");
            return (Criteria) this;
        }

        public Criteria andHallTypeNotEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("hall_type <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHallTypeGreaterThan(String value) {
            addCriterion("hall_type >", value, "hallType");
            return (Criteria) this;
        }

        public Criteria andHallTypeGreaterThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("hall_type > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHallTypeGreaterThanOrEqualTo(String value) {
            addCriterion("hall_type >=", value, "hallType");
            return (Criteria) this;
        }

        public Criteria andHallTypeGreaterThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("hall_type >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHallTypeLessThan(String value) {
            addCriterion("hall_type <", value, "hallType");
            return (Criteria) this;
        }

        public Criteria andHallTypeLessThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("hall_type < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHallTypeLessThanOrEqualTo(String value) {
            addCriterion("hall_type <=", value, "hallType");
            return (Criteria) this;
        }

        public Criteria andHallTypeLessThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("hall_type <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHallTypeLike(String value) {
            addCriterion("hall_type like", value, "hallType");
            return (Criteria) this;
        }

        public Criteria andHallTypeNotLike(String value) {
            addCriterion("hall_type not like", value, "hallType");
            return (Criteria) this;
        }

        public Criteria andHallTypeIn(List<String> values) {
            addCriterion("hall_type in", values, "hallType");
            return (Criteria) this;
        }

        public Criteria andHallTypeNotIn(List<String> values) {
            addCriterion("hall_type not in", values, "hallType");
            return (Criteria) this;
        }

        public Criteria andHallTypeBetween(String value1, String value2) {
            addCriterion("hall_type between", value1, value2, "hallType");
            return (Criteria) this;
        }

        public Criteria andHallTypeNotBetween(String value1, String value2) {
            addCriterion("hall_type not between", value1, value2, "hallType");
            return (Criteria) this;
        }

        public Criteria andDeletedIsNull() {
            addCriterion("deleted is null");
            return (Criteria) this;
        }

        public Criteria andDeletedIsNotNull() {
            addCriterion("deleted is not null");
            return (Criteria) this;
        }

        public Criteria andDeletedEqualTo(Boolean value) {
            addCriterion("deleted =", value, "deleted");
            return (Criteria) this;
        }

        public Criteria andDeletedEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("deleted = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeletedNotEqualTo(Boolean value) {
            addCriterion("deleted <>", value, "deleted");
            return (Criteria) this;
        }

        public Criteria andDeletedNotEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("deleted <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeletedGreaterThan(Boolean value) {
            addCriterion("deleted >", value, "deleted");
            return (Criteria) this;
        }

        public Criteria andDeletedGreaterThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("deleted > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeletedGreaterThanOrEqualTo(Boolean value) {
            addCriterion("deleted >=", value, "deleted");
            return (Criteria) this;
        }

        public Criteria andDeletedGreaterThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("deleted >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeletedLessThan(Boolean value) {
            addCriterion("deleted <", value, "deleted");
            return (Criteria) this;
        }

        public Criteria andDeletedLessThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("deleted < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeletedLessThanOrEqualTo(Boolean value) {
            addCriterion("deleted <=", value, "deleted");
            return (Criteria) this;
        }

        public Criteria andDeletedLessThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("deleted <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeletedIn(List<Boolean> values) {
            addCriterion("deleted in", values, "deleted");
            return (Criteria) this;
        }

        public Criteria andDeletedNotIn(List<Boolean> values) {
            addCriterion("deleted not in", values, "deleted");
            return (Criteria) this;
        }

        public Criteria andDeletedBetween(Boolean value1, Boolean value2) {
            addCriterion("deleted between", value1, value2, "deleted");
            return (Criteria) this;
        }

        public Criteria andDeletedNotBetween(Boolean value1, Boolean value2) {
            addCriterion("deleted not between", value1, value2, "deleted");
            return (Criteria) this;
        }

        public Criteria andSeatArrangeIsNull() {
            addCriterion("seat_arrange is null");
            return (Criteria) this;
        }

        public Criteria andSeatArrangeIsNotNull() {
            addCriterion("seat_arrange is not null");
            return (Criteria) this;
        }

        public Criteria andSeatArrangeEqualTo(Integer[][] value) {
            addSeatArrangeCriterion("seat_arrange =", value, "seatArrange");
            return (Criteria) this;
        }

        public Criteria andSeatArrangeEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("seat_arrange = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSeatArrangeNotEqualTo(Integer[][] value) {
            addSeatArrangeCriterion("seat_arrange <>", value, "seatArrange");
            return (Criteria) this;
        }

        public Criteria andSeatArrangeNotEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("seat_arrange <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSeatArrangeGreaterThan(Integer[][] value) {
            addSeatArrangeCriterion("seat_arrange >", value, "seatArrange");
            return (Criteria) this;
        }

        public Criteria andSeatArrangeGreaterThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("seat_arrange > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSeatArrangeGreaterThanOrEqualTo(Integer[][] value) {
            addSeatArrangeCriterion("seat_arrange >=", value, "seatArrange");
            return (Criteria) this;
        }

        public Criteria andSeatArrangeGreaterThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("seat_arrange >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSeatArrangeLessThan(Integer[][] value) {
            addSeatArrangeCriterion("seat_arrange <", value, "seatArrange");
            return (Criteria) this;
        }

        public Criteria andSeatArrangeLessThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("seat_arrange < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSeatArrangeLessThanOrEqualTo(Integer[][] value) {
            addSeatArrangeCriterion("seat_arrange <=", value, "seatArrange");
            return (Criteria) this;
        }

        public Criteria andSeatArrangeLessThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("seat_arrange <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSeatArrangeLike(Integer[][] value) {
            addSeatArrangeCriterion("seat_arrange like", value, "seatArrange");
            return (Criteria) this;
        }

        public Criteria andSeatArrangeNotLike(Integer[][] value) {
            addSeatArrangeCriterion("seat_arrange not like", value, "seatArrange");
            return (Criteria) this;
        }

        public Criteria andSeatArrangeIn(List<Integer[][]> values) {
            addSeatArrangeCriterion("seat_arrange in", values, "seatArrange");
            return (Criteria) this;
        }

        public Criteria andSeatArrangeNotIn(List<Integer[][]> values) {
            addSeatArrangeCriterion("seat_arrange not in", values, "seatArrange");
            return (Criteria) this;
        }

        public Criteria andSeatArrangeBetween(Integer[][] value1, Integer[][] value2) {
            addSeatArrangeCriterion("seat_arrange between", value1, value2, "seatArrange");
            return (Criteria) this;
        }

        public Criteria andSeatArrangeNotBetween(Integer[][] value1, Integer[][] value2) {
            addSeatArrangeCriterion("seat_arrange not between", value1, value2, "seatArrange");
            return (Criteria) this;
        }

        public Criteria andRowNumIsNull() {
            addCriterion("row_num is null");
            return (Criteria) this;
        }

        public Criteria andRowNumIsNotNull() {
            addCriterion("row_num is not null");
            return (Criteria) this;
        }

        public Criteria andRowNumEqualTo(Integer value) {
            addCriterion("row_num =", value, "rowNum");
            return (Criteria) this;
        }

        public Criteria andRowNumEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("row_num = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRowNumNotEqualTo(Integer value) {
            addCriterion("row_num <>", value, "rowNum");
            return (Criteria) this;
        }

        public Criteria andRowNumNotEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("row_num <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRowNumGreaterThan(Integer value) {
            addCriterion("row_num >", value, "rowNum");
            return (Criteria) this;
        }

        public Criteria andRowNumGreaterThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("row_num > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRowNumGreaterThanOrEqualTo(Integer value) {
            addCriterion("row_num >=", value, "rowNum");
            return (Criteria) this;
        }

        public Criteria andRowNumGreaterThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("row_num >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRowNumLessThan(Integer value) {
            addCriterion("row_num <", value, "rowNum");
            return (Criteria) this;
        }

        public Criteria andRowNumLessThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("row_num < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRowNumLessThanOrEqualTo(Integer value) {
            addCriterion("row_num <=", value, "rowNum");
            return (Criteria) this;
        }

        public Criteria andRowNumLessThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("row_num <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRowNumIn(List<Integer> values) {
            addCriterion("row_num in", values, "rowNum");
            return (Criteria) this;
        }

        public Criteria andRowNumNotIn(List<Integer> values) {
            addCriterion("row_num not in", values, "rowNum");
            return (Criteria) this;
        }

        public Criteria andRowNumBetween(Integer value1, Integer value2) {
            addCriterion("row_num between", value1, value2, "rowNum");
            return (Criteria) this;
        }

        public Criteria andRowNumNotBetween(Integer value1, Integer value2) {
            addCriterion("row_num not between", value1, value2, "rowNum");
            return (Criteria) this;
        }

        public Criteria andColumnNumIsNull() {
            addCriterion("column_num is null");
            return (Criteria) this;
        }

        public Criteria andColumnNumIsNotNull() {
            addCriterion("column_num is not null");
            return (Criteria) this;
        }

        public Criteria andColumnNumEqualTo(Integer value) {
            addCriterion("column_num =", value, "columnNum");
            return (Criteria) this;
        }

        public Criteria andColumnNumEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("column_num = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andColumnNumNotEqualTo(Integer value) {
            addCriterion("column_num <>", value, "columnNum");
            return (Criteria) this;
        }

        public Criteria andColumnNumNotEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("column_num <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andColumnNumGreaterThan(Integer value) {
            addCriterion("column_num >", value, "columnNum");
            return (Criteria) this;
        }

        public Criteria andColumnNumGreaterThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("column_num > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andColumnNumGreaterThanOrEqualTo(Integer value) {
            addCriterion("column_num >=", value, "columnNum");
            return (Criteria) this;
        }

        public Criteria andColumnNumGreaterThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("column_num >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andColumnNumLessThan(Integer value) {
            addCriterion("column_num <", value, "columnNum");
            return (Criteria) this;
        }

        public Criteria andColumnNumLessThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("column_num < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andColumnNumLessThanOrEqualTo(Integer value) {
            addCriterion("column_num <=", value, "columnNum");
            return (Criteria) this;
        }

        public Criteria andColumnNumLessThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("column_num <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andColumnNumIn(List<Integer> values) {
            addCriterion("column_num in", values, "columnNum");
            return (Criteria) this;
        }

        public Criteria andColumnNumNotIn(List<Integer> values) {
            addCriterion("column_num not in", values, "columnNum");
            return (Criteria) this;
        }

        public Criteria andColumnNumBetween(Integer value1, Integer value2) {
            addCriterion("column_num between", value1, value2, "columnNum");
            return (Criteria) this;
        }

        public Criteria andColumnNumNotBetween(Integer value1, Integer value2) {
            addCriterion("column_num not between", value1, value2, "columnNum");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIsNull() {
            addCriterion("update_time is null");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIsNotNull() {
            addCriterion("update_time is not null");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeEqualTo(LocalDateTime value) {
            addCriterion("update_time =", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("update_time = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotEqualTo(LocalDateTime value) {
            addCriterion("update_time <>", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("update_time <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThan(LocalDateTime value) {
            addCriterion("update_time >", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("update_time > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThanOrEqualTo(LocalDateTime value) {
            addCriterion("update_time >=", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("update_time >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThan(LocalDateTime value) {
            addCriterion("update_time <", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("update_time < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThanOrEqualTo(LocalDateTime value) {
            addCriterion("update_time <=", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("update_time <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIn(List<LocalDateTime> values) {
            addCriterion("update_time in", values, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotIn(List<LocalDateTime> values) {
            addCriterion("update_time not in", values, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("update_time between", value1, value2, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("update_time not between", value1, value2, "updateTime");
            return (Criteria) this;
        }

        public Criteria andLocationIsNull() {
            addCriterion("`location` is null");
            return (Criteria) this;
        }

        public Criteria andLocationIsNotNull() {
            addCriterion("`location` is not null");
            return (Criteria) this;
        }

        public Criteria andLocationEqualTo(String value) {
            addCriterion("`location` =", value, "location");
            return (Criteria) this;
        }

        public Criteria andLocationEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("`location` = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLocationNotEqualTo(String value) {
            addCriterion("`location` <>", value, "location");
            return (Criteria) this;
        }

        public Criteria andLocationNotEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("`location` <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLocationGreaterThan(String value) {
            addCriterion("`location` >", value, "location");
            return (Criteria) this;
        }

        public Criteria andLocationGreaterThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("`location` > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLocationGreaterThanOrEqualTo(String value) {
            addCriterion("`location` >=", value, "location");
            return (Criteria) this;
        }

        public Criteria andLocationGreaterThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("`location` >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLocationLessThan(String value) {
            addCriterion("`location` <", value, "location");
            return (Criteria) this;
        }

        public Criteria andLocationLessThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("`location` < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLocationLessThanOrEqualTo(String value) {
            addCriterion("`location` <=", value, "location");
            return (Criteria) this;
        }

        public Criteria andLocationLessThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("`location` <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLocationLike(String value) {
            addCriterion("`location` like", value, "location");
            return (Criteria) this;
        }

        public Criteria andLocationNotLike(String value) {
            addCriterion("`location` not like", value, "location");
            return (Criteria) this;
        }

        public Criteria andLocationIn(List<String> values) {
            addCriterion("`location` in", values, "location");
            return (Criteria) this;
        }

        public Criteria andLocationNotIn(List<String> values) {
            addCriterion("`location` not in", values, "location");
            return (Criteria) this;
        }

        public Criteria andLocationBetween(String value1, String value2) {
            addCriterion("`location` between", value1, value2, "location");
            return (Criteria) this;
        }

        public Criteria andLocationNotBetween(String value1, String value2) {
            addCriterion("`location` not between", value1, value2, "location");
            return (Criteria) this;
        }

        public Criteria andHallIdStrIsNull() {
            addCriterion("hall_id_str is null");
            return (Criteria) this;
        }

        public Criteria andHallIdStrIsNotNull() {
            addCriterion("hall_id_str is not null");
            return (Criteria) this;
        }

        public Criteria andHallIdStrEqualTo(String value) {
            addCriterion("hall_id_str =", value, "hallIdStr");
            return (Criteria) this;
        }

        public Criteria andHallIdStrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("hall_id_str = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHallIdStrNotEqualTo(String value) {
            addCriterion("hall_id_str <>", value, "hallIdStr");
            return (Criteria) this;
        }

        public Criteria andHallIdStrNotEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("hall_id_str <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHallIdStrGreaterThan(String value) {
            addCriterion("hall_id_str >", value, "hallIdStr");
            return (Criteria) this;
        }

        public Criteria andHallIdStrGreaterThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("hall_id_str > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHallIdStrGreaterThanOrEqualTo(String value) {
            addCriterion("hall_id_str >=", value, "hallIdStr");
            return (Criteria) this;
        }

        public Criteria andHallIdStrGreaterThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("hall_id_str >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHallIdStrLessThan(String value) {
            addCriterion("hall_id_str <", value, "hallIdStr");
            return (Criteria) this;
        }

        public Criteria andHallIdStrLessThanColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("hall_id_str < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHallIdStrLessThanOrEqualTo(String value) {
            addCriterion("hall_id_str <=", value, "hallIdStr");
            return (Criteria) this;
        }

        public Criteria andHallIdStrLessThanOrEqualToColumn(HallBase.Column column) {
            addCriterion(new StringBuilder("hall_id_str <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andHallIdStrLike(String value) {
            addCriterion("hall_id_str like", value, "hallIdStr");
            return (Criteria) this;
        }

        public Criteria andHallIdStrNotLike(String value) {
            addCriterion("hall_id_str not like", value, "hallIdStr");
            return (Criteria) this;
        }

        public Criteria andHallIdStrIn(List<String> values) {
            addCriterion("hall_id_str in", values, "hallIdStr");
            return (Criteria) this;
        }

        public Criteria andHallIdStrNotIn(List<String> values) {
            addCriterion("hall_id_str not in", values, "hallIdStr");
            return (Criteria) this;
        }

        public Criteria andHallIdStrBetween(String value1, String value2) {
            addCriterion("hall_id_str between", value1, value2, "hallIdStr");
            return (Criteria) this;
        }

        public Criteria andHallIdStrNotBetween(String value1, String value2) {
            addCriterion("hall_id_str not between", value1, value2, "hallIdStr");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table hall_base
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {
        /**
         * This field was generated by MyBatis Generator.
         * This field corresponds to the database table hall_base
         *
         * @mbg.generated
         */
        private HallBaseExample example;

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table hall_base
         *
         * @mbg.generated
         */
        protected Criteria(HallBaseExample example) {
            super();
            this.example = example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table hall_base
         *
         * @mbg.generated
         */
        public HallBaseExample example() {
            return this.example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table hall_base
         *
         * @mbg.generated
         */
        @Deprecated
        public Criteria andIf(boolean ifAdd, ICriteriaAdd add) {
            if (ifAdd) {
                add.add(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table hall_base
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then) {
            if (condition) {
                then.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table hall_base
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then, ICriteriaWhen otherwise) {
            if (condition) {
                then.criteria(this);
            } else {
                otherwise.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table hall_base
         *
         * @mbg.generated
         */
        public Criteria andLogicalDeleted(boolean deleted) {
            return deleted ? andDeletedEqualTo(HallBase.Deleted.IS_DELETED.value()) : andDeletedNotEqualTo(HallBase.Deleted.IS_DELETED.value());
        }

        @Deprecated
        public interface ICriteriaAdd {
            /**
             * This method was generated by MyBatis Generator.
             * This method corresponds to the database table hall_base
             *
             * @mbg.generated
             */
            Criteria add(Criteria add);
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table hall_base
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    public interface ICriteriaWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table hall_base
         *
         * @mbg.generated
         */
        void criteria(Criteria criteria);
    }

    public interface IExampleWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table hall_base
         *
         * @mbg.generated
         */
        void example(cn.hnist.sharo.mcinema.db.pojo.HallBaseExample example);
    }
}